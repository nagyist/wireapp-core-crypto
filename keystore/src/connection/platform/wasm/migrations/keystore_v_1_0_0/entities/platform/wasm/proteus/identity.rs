use crate::keystore_v_1_0_0::{
    CryptoKeystoreResult, MissingKeyErrorKind,
    connection::{DatabaseConnection, KeystoreDatabaseConnection},
    entities::{Entity, EntityBase, EntityFindParams, ProteusIdentity, StringEntityId},
};

#[cfg_attr(target_family = "wasm", async_trait::async_trait(?Send))]
#[cfg_attr(not(target_family = "wasm"), async_trait::async_trait)]
impl EntityBase for ProteusIdentity {
    type ConnectionType = KeystoreDatabaseConnection;
    type AutoGeneratedFields = ();

    fn to_missing_key_err_kind() -> MissingKeyErrorKind {
        MissingKeyErrorKind::ProteusIdentity
    }

    async fn find_all(conn: &mut Self::ConnectionType, _params: EntityFindParams) -> CryptoKeystoreResult<Vec<Self>> {
        let storage = conn.storage();
        storage.get_all("proteus_identities", None).await
    }

    async fn save(&self, conn: &mut Self::ConnectionType) -> CryptoKeystoreResult<()> {
        let storage = conn.storage_mut();
        storage.save("proteus_identities", &mut [self.clone()]).await
    }

    async fn find_one(conn: &mut Self::ConnectionType, _id: &StringEntityId) -> CryptoKeystoreResult<Option<Self>> {
        let mut identities = Self::find_all(conn, EntityFindParams::default()).await?;
        if identities.is_empty() {
            Ok(None)
        } else {
            Ok(identities.pop())
        }
    }

    async fn count(conn: &mut Self::ConnectionType) -> CryptoKeystoreResult<usize> {
        let storage = conn.storage();
        storage.count("proteus_identities").await
    }

    async fn delete(conn: &mut Self::ConnectionType, ids: &[StringEntityId]) -> CryptoKeystoreResult<()> {
        let storage = conn.storage_mut();
        let ids: Vec<Vec<u8>> = ids.iter().map(StringEntityId::to_bytes).collect();
        storage.delete("proteus_identities", &ids).await
    }
}

impl Entity for ProteusIdentity {
    fn id_raw(&self) -> &[u8] {
        &[1u8]
    }

    fn encrypt(&mut self, cipher: &aes_gcm::Aes256Gcm) -> CryptoKeystoreResult<()> {
        self.pk = Self::encrypt_data(cipher, self.pk.as_slice(), self.aad())?;
        Self::ConnectionType::check_buffer_size(self.pk.len())?;

        self.sk = Self::encrypt_data(cipher, self.sk.as_slice(), self.aad())?;
        Self::ConnectionType::check_buffer_size(self.sk.len())?;

        Ok(())
    }

    fn decrypt(&mut self, cipher: &aes_gcm::Aes256Gcm) -> CryptoKeystoreResult<()> {
        self.pk = Self::decrypt_data(cipher, self.pk.as_slice(), self.aad())?;
        self.sk = Self::decrypt_data(cipher, self.sk.as_slice(), self.aad())?;

        Ok(())
    }
}
