name: rust

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tool:
          - name: fmt
            trailer: --all -- --check
          - name: clippy --locked
            trailer: -- -D warnings
          - name: check --locked
            trailer: --tests
        target: ["", "--target wasm32-unknown-unknown"]
        exclude:
          - {tool: {name: fmt},
             target: "--target wasm32-unknown-unknown"}

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1  # this implicitly caches Rust tools and build artifacts
        with:
          components: rustfmt, clippy
          rustflags: ''
          target: wasm32-unknown-unknown
      - run: cargo ${{ matrix.tool.name }} ${{ matrix.target }} ${{ matrix.tool.trailer }}

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1  # this implicitly caches Rust tools and build artifacts
        with:
          rustflags: ''
      - uses: taiki-e/install-action@nextest
      - name: "test corecrypto"
        run: cargo nextest run --verbose --locked
      - name: "test corecrypto documentation"
        run: cargo test --doc --locked
      - name: "upload test results"
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: target/nextest/default/junit.xml

  proteus-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1  # this implicitly caches Rust tools and build artifacts
        with:
          rustflags: ''
      - uses: taiki-e/install-action@nextest
      - name: "test corecrypto's proteus implementation"
        run: cargo nextest run --locked --verbose --features proteus,cryptobox-migrate,proteus-keystore proteus

  wasm-test:
    runs-on: ubuntu-latest
    env:
      WASM_BINDGEN_TEST_TIMEOUT: "1200" # if our test takes over 20m, it probably _should_ fail
    strategy:
      matrix:
        config:
          - crate: keystore
          - crate: mls-provider
          - crate: crypto
            module: -- e2e_identity
          - crate: crypto
            module: -- mls
          - crate: crypto
            module: -- group_store
          - crate: crypto
            module: -- proteus
          - crate: keystore
            feature: --features proteus-keystore
            module: -- proteus
          - crate: crypto
            feature: --features proteus,cryptobox-migrate
            module: -- proteus
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: wasm32-unknown-unknown
          rustflags: ''
      - uses: browser-actions/setup-chrome@latest
        id: setup-chrome
        with:
          chrome-version: stable
      - run: echo "CHROME_PATH=${{ steps.setup-chrome.outputs.chrome-path }}" >> $GITHUB_ENV
      - name: install wasm-pack
        uses: taiki-e/install-action@v2
        with:
          tool: wasm-pack
      - run: wasm-pack test --headless --chrome ./${{ matrix.config.crate }} ${{ matrix.config.feature }} ${{ matrix.config.module }}

  hack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1  # this implicitly caches Rust tools and build artifacts
        with:
          rustflags: ''
      - uses: taiki-e/install-action@cargo-hack
      - name: cargo/hack (verify features compile in isolation)
        run: cargo hack check --each-feature --no-dev-deps
